//////////////// FILE HEADER (INCLUDE IN EVERY FILE) //////////////////////////
//
// Title:    P04 Exceptional Care
// Course:   CS 300 Spring 2023
//
// Author:   Eugene Park
// Email:    empark@wisc.edu
// Lecturer: Hobbes Legault
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION ///////////////////
//
// Partner Name:    Katie Krause
// Partner Email:   klkrause5@wisc.edu
// Partner Lecturer's Name: Mouna Kacem
// 
// VERIFY THE FOLLOWING BY PLACING AN X NEXT TO EACH TRUE STATEMENT:
//   _x__ Write-up states that pair programming is allowed for this assignment.
//   _x__ We have both read and understand the course Pair Programming Policy.
//   _x__ We have registered our team prior to the team registration deadline.
//
///////////////////////// ALWAYS CREDIT OUTSIDE HELP //////////////////////////
//
// Persons: Katie Krause, pair programmer. Helped implement every method with me
//
// Online Sources: 
// Used this method to implement the File Writer for the cleanPatientsList
//
// 
// 
///////////////////////////////////////////////////////////////////////////////

/**
 * The PatientRecord class represents a patient's record. Each PatientRecord 
 * object is identified by a unique case number generated by the 
 * static method generateCaseNumber(). The class provides a method that gets
 * and sets the patient's gender, age, triage level, arrival order, and 
 * whether they have been seen.
 * 
 * @author Katie Krause and Eugene Park
 *
 */
public class PatientRecord {

	  public static final int GREEN = 2;
	  public static final int YELLOW = 1;
	  public static final int RED = 0;
	  private static int patientCounter = 1;
	  public final int CASE_NUMBER;
	  private char gender;
	  private int age;
	  private int triage;
	  private int orderOfArrival;
	  private boolean hasBeenSeen;
	  
	  /**
	   * Creates a PatientRecord object with the specified gender, age, and triage level.
	   * @param gender a char representing the gender of the patient 
	   * ('M' for male, 'F' for female, 'X' for non-binary)
	   * @param age an int that represents the age of the patient
	   * @param triage an int representing the triage level of the patient 
	   * ('RED', 'GREEN', or 'YELLOW')
	   */
	  public PatientRecord(char gender, int age, int triage) {
		    if (triage != RED && triage != GREEN && triage!= YELLOW) {
		        throw new IllegalArgumentException("Not a valid triage level " + triage);
		      }
		    this.CASE_NUMBER = generateCaseNumber(gender, age);;
		    this.gender = gender;
		    this.age = age;
		    this.triage = triage;
		    this.orderOfArrival = patientCounter-1 ;
		    this.hasBeenSeen = false;
	  }
	  
	  /**
	   * Generates a case number for a patient based on their gender and age.
	   * @param gender a char representing the gender of the patient 
	   * ('M' for male, 'F' for female, 'X' for non-binary)
	   * @param age an int that represents the age of the patient
	   * @return an int representing the triage level of the patient 
	   * ('RED', 'GREEN', or 'YELLOW')
	   */
	  public static int generateCaseNumber(char gender, int age) {
		  int genderDigit;
		  if (gender == 'F') {
			  genderDigit = 1;
			  } else if (gender == 'M') {
				  genderDigit = 2;
				  } else if (gender == 'X') {
					  genderDigit = 3;
					  } else {
						  genderDigit = 4;
						  }
		  int ageCode = age % 100;
		  int countCode = (patientCounter % 100);
		  int caseNumber = (genderDigit * 10000) + (ageCode * 100) + countCode;
		  if (countCode == 100) {
			  countCode = 0;
			  }
		  ++patientCounter;
		  return caseNumber;
	  }
	  
	  /**
	   * Resets the patient counter to 1.
	   */
	  public static void resetCounter() {
		  patientCounter = 1;
	  }
	  
	  /**
	   * Returns the gender of the patient.
	   * @return a char representing the gender of the patient 
	   * ('M' for male, 'F' for female, 'X' for non-binary)
	   */
	  public char getGender() {
		  return gender;
	  }
	  
	  /**
	   * Returns the age of the patient.
	   * @return an int representing the age of the patient
	   */
	  public int getAge() {
		  return age;
	  }
	  
	  /**
	   * Returns the triage level of the patient.
	   * @return an int representing the triage level of the patient
	   * ('RED', 'GREEN', or 'YELLOW')
	   */
	  public int getTriage() {
		  return triage;
	  }
	  
	  /**
	   * Returns the order in which the patient arrived at the hospital.
	   * @return an int representing the order in which 
	   * the patient arrived at the hospital
	   */
	  public int getArrivalOrder() {
		  return orderOfArrival;
	  }
	  
	  /**
	   * Sets the hasBeenSeen of the patient to the value true.
	   */
	  public void seePatient() {
		  hasBeenSeen = true;
	  }
	  
	  /**
	   * Returns whether or not the patient has been seen.
	   * @return true if the patient has been seen by a doctor, 
	   * if not, returns false 
	   */
	  public boolean hasBeenSeen() {
		  return hasBeenSeen;
	  }
	  
	  /**
	   * Returns a String representation of the PatientRecord object, 
	   * including the case number, age, gender, and triage level.
	   * @return a string representing the PatientRecord object 
	   * in the format: CASE_NUMBER: age, gender, and (triage level)
	   */
	  public String toString() {
		  String triageStr;
		  if (triage == RED) {
			  triageStr = "RED";
			  } else if (triage == YELLOW) {
				  triageStr = "YELLOW";
				  } else {
					  triageStr = "GREEN";
				  }
		  return CASE_NUMBER + ": " + age + gender + " (" + triageStr + ")";
	  }
}
